pwd =현재 bash 폴더 위치

cd x/ =현재 위치 내의 x에 접근{
cd .. = 현지 위치 상위 dir에 접근
}

mkdir x =현재 위치에 x라는 폴더 생성

git init = 현재 dir에서 작업을 시작하겠다는 뜻{
git init --bare x = x라는 dir을 만들고 초기화함(--bare = 저장소로서의 기능만 가지게끔 아무 작업도 할 수 없게 하는 옵션)
}

ls -al = 현재 dir의 파일 목록 

clear = bash 초기화

vim x.형식 = vim으로 만들기ex)f1.txt
(후 i 입력 -  insert모드 , 후 esc - 명령어모드)
 
vim 명령어모드 상태에서 : 입력 후 w(저장), q(나가기)

cat 파일명.형식 = 파일의 내용 보기(cat f1.txt / working directory를 봄 repository가 아님!) 

git status = dir이랑 git 의 호환상태

git add 파일명.형식 = git이 그 파일을 추적하기 시작함

git config (--global) core. autocrlf true = 맥이나 리눅스와 crlf 형식 호환을 자동으로 되게 해주는 코드 (--global은 전체 대상 적용 시 사용)

git config --global user.name x = 유저 네임을 x로 지정

git config --global user.email x = 유저 이메일을 x로 지정

git commit = vim 실행 {
i를 눌러 insert모드로 바꾼 후 입력하면 버젼 명 입력됨 :wq 저장 후 종료
git commit -a = add후 commit
git commit -am "x" = add 후 x라는 버젼명을 붙이고 commit
}

git log = 버젼 생성자, 이메일, 생성일자, 버젼명 등 출력  (q로 빠져나가기 가능){
git log -p = commit 과 commit 사이에 소스의 차이점
git log -p exp..master = exp에는 없고 master에는 있는 버젼과 그 diff(반대로 입력하면 그 반대를 출력)
git log --reverse = 가장 오래된 커밋부터 정렬
}

새로운 버젼이 생겼을 때, 관리되고 있는 버젼이 수정되었을 때  아무튼 수정되면 add시켜야 됨

cp 파일명1.형식 파일명2.형식 = 파일명 1을 파일명 2라는 이름으로 복사함

한 commit에는 한 가지 작업만 담기는 게 이상적 그래서 까먹고 여러 작업을 commit 없이 했을 때 각 작업별로 하나씩 add하고 commit 해주면 한 commit 에 한 작업만 담기 가능

stage area = commit 대기중인 파일들 (add된 후 commit 되지 않은 파일들)

git diff = working directory와 index의 차이를 보여줌{
git diff commit주소..commit주소 = 두 commit 사이의 소스코드 상 차이점을 보여줌(버젼 변경할 때 실수한 부분이 있는지 판단할 수 있게 도와줌) 
git diff master..exp = 두 가지의 차이점 출력
}

git reset (협업중인 자료는 절대 리셋 x){
git reset "commit주소" --hard  = 이 commit 보다 최신 버젼의 commit 모두 삭제 (하지만 .git/ORIG_HEAD || logs에는 남아있음)
git reset --soft = repository 기록 리셋
git reset --mixed = repository, index 기록 리셋
git reset --hard = repository, index, working directory 기록 리셋
}

git branch = branch 확인{
git branch x = x라는 이름의 branch 만들기
(branch를 생성하면 현재 있는 branch의 상태를 그대로 복사해서 branch를 만듦.)
git checkout x = 원래 있던 가지에서 checkout하고 x라는 branch로 접근함
git log --branches --decorate --graph = 각 가지들의 진행방향을 그래프로 보기 쉽게 나타냄(+ --oneline  = 한 줄로 간결하게 표시) ---lb로 간결화시킴
git branch -d 'branch명' = 입력한 가지를 삭제함
git checkout -b exp  =  git branch exp + git checkout exp
}

git merge 'branch 명' = 입력한 branch명을 현재 branch가 가리키도록 한다. (한 commit에 이중버전)

git stash = 현재 작업중인 프로젝트를 wroking in process 에 '임시' 저장한다. (명시적 삭제가 아닌 이상 항상 살아있게 됨 / 추적되고 있지 않은 파일은 stash 되지 않음){
git stash apply = 임시 저장했던 프로젝트 가져옴
git stash list = 임시 저장한 프로젝트 list 출력(가장 위에 것이 최근 것)
gi stash drop = 가장 최신 stash 삭제  (git stash apply; git stash drop  = 적용과 삭제 동시에)
}

rm x/y/z(상대위치) = 경로를 찾아가 입력한 파일을 삭제함

origin x = origin이 x 의 별명이 됨(git remote add origin '저장소 주소' => git pull origin master = '저장소 주소' 에 master로 당겨옴){
git remote -v = origin으로 설정된 별명을 보여줌
git remote remove origin = origin 삭제

git clone 'reops 주소' x = x라는 dir을 만들어 입력한 저장소의 파일들을 가져옴


36
